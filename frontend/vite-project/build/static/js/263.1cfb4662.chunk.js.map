{"version":3,"file":"static/js/263.1cfb4662.chunk.js","mappings":"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","sources":["../node_modules/phosphor-react/src/icons/MagnifyingGlass.tsx","layouts/dashboard/BottomNav.js","components/ChatElement.js","components/Search/Search.js","components/Search/SearchIconWrapper.js","components/Search/StyledInputBase.js","pages/dashboard/Chats.js"],"sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <circle\n      cx=\"116\"\n      cy=\"116\"\n      r=\"84\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"175.4\"\n      y1=\"175.4\"\n      x2=\"224\"\n      y2=\"224\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <circle cx=\"116\" cy=\"116\" r=\"84\" opacity=\"0.2\" />\n    <circle\n      cx=\"116\"\n      cy=\"116\"\n      r=\"84\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"175.4\"\n      y1=\"175.4\"\n      x2=\"224\"\n      y2=\"224\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M176,116a60,60,0,1,1-60-60A60,60,0,0,1,176,116Zm53.6,113.7A8,8,0,0,1,224,232a8.3,8.3,0,0,1-5.7-2.3l-43.2-43.3a92.2,92.2,0,1,1,11.3-11.3l43.2,43.2A8,8,0,0,1,229.6,229.7ZM116,192a76,76,0,1,0-76-76A76.1,76.1,0,0,0,116,192Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <circle\n      cx=\"116\"\n      cy=\"116\"\n      r=\"84\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"175.4\"\n      y1=\"175.4\"\n      x2=\"224\"\n      y2=\"224\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <circle\n      cx=\"116\"\n      cy=\"116\"\n      r=\"84\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"175.4\"\n      y1=\"175.4\"\n      x2=\"224\"\n      y2=\"224\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <circle\n      cx=\"116\"\n      cy=\"116\"\n      r=\"84\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"175.4\"\n      y1=\"175.4\"\n      x2=\"224\"\n      y2=\"224\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst MagnifyingGlass = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nMagnifyingGlass.displayName = \"MagnifyingGlass\";\n\nexport default MagnifyingGlass;\n","import React from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Box, IconButton, Stack } from \"@mui/material\";\nimport ProfileMenu from \"./ProfileMenu\";\nimport { Nav_Buttons } from \"../../data\";\n\nconst BottomNav = () => {\n  const theme = useTheme();\n\n  const [selectedTab, setSelectedTab] = React.useState(0);\n\n  const handleChangeTab = (index) => {\n    setSelectedTab(index);\n  };\n\n  return (\n    <Box\n      sx={{\n        zIndex: 10,\n        position: \"absolute\",\n        bottom: 0,\n        width: \"100vw\",\n\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n      }}\n    >\n      <Stack\n        sx={{ width: \"100%\" }}\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n        spacing={2}\n        p={2}\n      >\n        {Nav_Buttons.map((el) => {\n          return el.index === selectedTab ? (\n            <Box sx={{ backgroundColor: theme.palette.primary.main, borderRadius: 1.5 }} p={1}>\n              <IconButton sx={{ width: \"max-content\", color: \"#ffffff\" }}>\n                {el.icon}\n              </IconButton>\n            </Box>\n          ) : (\n            <IconButton\n              onClick={() => {\n                handleChangeTab(el.index);\n              }}\n              sx={{\n                width: \"max-content\",\n                color:\n                  theme.palette.mode === \"light\"\n                    ? \"#080707\"\n                    : theme.palette.text.primary,\n              }}\n            >\n              {el.icon}\n            </IconButton>\n          );\n        })}\n        <ProfileMenu />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default BottomNav;\n","import React from \"react\";\nimport { Box, Badge, Stack, Avatar, Typography } from \"@mui/material\";\nimport { styled, useTheme, alpha } from \"@mui/material/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SelectConversation } from \"../redux/slices/app\";\nimport conversation, { FetchCurrentMessages } from \"../redux/slices/conversation\";\nimport { format, parseISO, isSameDay } from \"date-fns\";\nimport { vi } from \"date-fns/locale\";\n\nconst truncateText = (string, n) => {\n  return string?.length > n ? `${string?.slice(0, n)}...` : string;\n};\n\nconst StyledChatBox = styled(Box)(({ theme }) => ({\n  \"&:hover\": {\n    cursor: \"pointer\",\n  },\n}));\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    backgroundColor: \"#44b700\",\n    color: \"#44b700\",\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    \"&::after\": {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: \"50%\",\n      animation: \"ripple 1.2s infinite ease-in-out\",\n      border: \"1px solid currentColor\",\n      content: '\"\"',\n    },\n  },\n  \"@keyframes ripple\": {\n    \"0%\": {\n      transform: \"scale(.8)\",\n      opacity: 1,\n    },\n    \"100%\": {\n      transform: \"scale(2.4)\",\n      opacity: 0,\n    },\n  },\n}));\n\nconst ChatElement = ({ img, displayName, msg, time, unread, online, id, isSearching,onClick }) => {\n  const { currentConversationId,isFirstLogin } = useSelector((state) => state.conversation);\n\n  const isSelected = !isFirstLogin ? currentConversationId === id:false;\n\n  const theme = useTheme();\n\n\n  return (\n    <StyledChatBox\n    onClick={onClick}\n      sx={{\n        width: \"100%\",\n        borderRadius: 1,\n        backgroundColor: isSelected\n          ? theme.palette.mode === \"light\"\n            ? alpha(theme.palette.primary.main, 0.5)\n            : theme.palette.primary.main\n          : theme.palette.mode === \"light\"\n          ? \"#fff\"\n          : theme.palette.background.paper,\n      }}\n      p={2}\n    >\n      <Stack\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n      >\n        <Stack direction=\"row\" spacing={2}>\n          {online ? (\n            <StyledBadge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              variant=\"dot\"\n            >\n              <Avatar alt={displayName} src={img} />\n            </StyledBadge>\n          ) : (\n            <Avatar alt={displayName} src={img} />\n          )}\n          <Stack spacing={0.3}>\n            <Typography variant=\"subtitle2\">{displayName}</Typography>\n            <Typography variant=\"caption\">{truncateText(msg, 20)}</Typography>\n          </Stack>\n        </Stack>\n        <Stack spacing={2} alignItems={\"center\"}>\n          <Typography sx={{ fontWeight: 600 }} variant=\"caption\">\n            {time}\n          </Typography>\n          <Badge className=\"unread-count\" color=\"primary\" badgeContent={unread} />\n        </Stack>\n      </Stack>\n    </StyledChatBox>\n  );\n};\n\nexport default ChatElement;\n","import { styled, alpha } from \"@mui/material/styles\";\n\nconst Search = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: 20,\n  backgroundColor: alpha(theme.palette.background.paper, 1),\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: \"100%\",\n}));\n\nexport default Search;\n","import { styled } from \"@mui/material/styles\";  \n\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }));\n\n  export default SearchIconWrapper;\n  ","import { InputBase } from \"@mui/material\";\nimport {styled} from \"@mui/material/styles\";\n\n\n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: \"inherit\",\n    \"& .MuiInputBase-input\": {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      width: \"100%\",\n    },\n  }));\n\n  export default StyledInputBase;","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  IconButton,\n  Stack,\n  Typography,\n} from \"@mui/material\";\nimport {\n  ArchiveBox,\n  CircleDashed,\n  MagnifyingGlass,\n  Users,\n} from \"phosphor-react\";\nimport { SimpleBarStyle } from \"../../components/Scrollbar\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useResponsive from \"../../hooks/useResponsive\";\nimport BottomNav from \"../../layouts/dashboard/BottomNav\";\nimport ChatElement from \"../../components/ChatElement\";\nimport {\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"../../components/Search\";\nimport { socket, connectSocket, disconnectSocket } from \"../../socket\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  FetchConversations,\n  SetLatestMessage,\n  FetchCurrentMessages,\n} from \"../../redux/slices/conversation\";\nimport { format, parseISO, isSameDay, isValid } from \"date-fns\";\nimport { vi } from \"date-fns/locale\";\n\nconst Chats = () => {\n  const theme = useTheme();\n  const isDesktop = useResponsive(\"up\", \"md\");\n\n  const dispatch = useDispatch();\n  const { user_id } = useSelector((state) => state.auth);\n  const { conversationsList } = useSelector((state) => state.conversation);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n\n  useEffect(() => {\n    if (user_id) {\n      connectSocket(user_id);\n      dispatch(FetchConversations());\n\n      socket.on(\"trans-msg\", (msg) => {\n        dispatch(SetLatestMessage({ message: msg }));\n      });\n\n      socket.on(\"searchUserResult\", (result) => {\n        console.log(\"Search results received:\", result);\n        setSearchResults(result);\n      });\n\n      return () => {\n        disconnectSocket();\n        socket.off(\"trans-msg\");\n        socket.off(\"searchUserResult\");\n      };\n    }\n  }, [dispatch, user_id]);\n\n  const handleSearchChange = (event) => {\n    const searchStr = event.target.value;\n    setSearchTerm(searchStr);\n\n    if (searchStr.length > 0) {\n      const user = {\n        userID: user_id,\n        searchStr,\n      };\n\n      if (socket) {\n        socket.emit(\"search_user\", user);\n        console.log(\"Searching for user:\", user);\n      }\n    } else {\n      setSearchResults([]);\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  const formatTime = (time) => {\n    const date = parseISO(time);\n    const now = new Date();\n\n    const adjustedDate = new Date(date.getTime());\n\n    if (isSameDay(adjustedDate, now)) {\n      return format(adjustedDate, \"HH:mm\", { locale: vi });\n    } else {\n      return format(adjustedDate, \"dd/MM/yyyy\", { locale: vi });\n    }\n  };\n\n  const handleSearchResultClick = async (friendID) => {\n    try {\n      const url = \"http://localhost:8000/api/conversation\";\n      const members = [user_id.toString(), friendID.toString()];\n  \n      let body = new URLSearchParams();\n      body.append(\"members\", members);\n  \n      const req1 = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: body.toString(),\n      };\n  \n      let res = await callAPI(url, req1);\n      console.log(res);\n  \n      if (!res || !res.data || !res.data._id) {\n        console.warn(\"PUT request did not return a valid conversation, attempting to create a new one\", res);\n        \n        const req2 = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: body.toString(),\n        };\n  \n        res = await callAPI(url, req2);\n        console.log(res);\n\n  \n        if (!res || !res.data || !res.data._id) {\n          throw new Error(\"Failed to create or find conversation.\");\n        }\n      }\n  \n      const currentConversation = res.data._id;\n  \n      dispatch(FetchCurrentMessages({ conversationId: currentConversation }));\n      setSelectedConversation(currentConversation);\n      dispatch(FetchConversations());\n  \n      setSearchTerm(\"\");\n      setSearchResults([]);\n    } catch (error) {\n      console.error(\"Error handling search result click:\", error);\n    }\n  };\n  \n  async function callAPI(url, req) {\n    try {\n      const response = await fetch(url, req);\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Network response was not ok: ${errorText}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error creating document:\", error);\n      return null;\n    }\n  }\n\n  const sortedConversationsList = conversationsList.slice().sort((a, b) => {\n    const timeA =\n      a.latestMessage && isValid(parseISO(a.latestMessage?.sentTime))\n        ? parseISO(a.latestMessage?.sentTime)\n        : a.lastActive && isValid(parseISO(a.lastActive))\n        ? parseISO(a.lastActive)\n        : new Date(0); // Default to earliest date if both are missing\n    const timeB =\n      b.latestMessage && isValid(parseISO(b.latestMessage?.sentTime))\n        ? parseISO(b.latestMessage?.sentTime)\n        : b.lastActive && isValid(parseISO(b.lastActive))\n        ? parseISO(b.lastActive)\n        : new Date(0); // Default to earliest date if both are missing\n    return timeB - timeA;\n  });\n\n  // Ensure the selected conversation is at the top\n  if (selectedConversation) {\n    const selectedConvIndex = sortedConversationsList.findIndex(\n      (conv) => conv._id === selectedConversation\n    );\n    if (selectedConvIndex > -1) {\n      const [selectedConv] = sortedConversationsList.splice(\n        selectedConvIndex,\n        1\n      );\n      sortedConversationsList.unshift(selectedConv);\n    }\n  }\n\n  return (\n    <>\n      <Box\n        sx={{\n          position: \"relative\",\n          height: \"100%\",\n          width: isDesktop ? 320 : \"100vw\",\n          backgroundColor:\n            theme.palette.mode === \"light\" ? \"#F8FAFF\" : theme.palette.background,\n          boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n        }}\n      >\n        {!isDesktop && <BottomNav />}\n\n        <Stack p={3} spacing={2} sx={{ maxHeight: \"100vh\" }}>\n          <Stack alignItems={\"center\"} justifyContent=\"space-between\" direction=\"row\">\n            <Typography variant=\"h5\">Chats</Typography>\n          </Stack>\n          <Stack sx={{ width: \"100%\" }}>\n            <Search>\n              <SearchIconWrapper>\n                <MagnifyingGlass color=\"#709CE6\" />\n              </SearchIconWrapper>\n              <StyledInputBase\n                placeholder=\"Search…\"\n                inputProps={{ \"aria-label\": \"search\" }}\n                value={searchTerm}\n                onChange={handleSearchChange}\n              />\n            </Search>\n          </Stack>\n          <Divider/>\n          <Stack sx={{ flexGrow: 1, overflow: \"scroll\", height: \"100%\" }}>\n            <SimpleBarStyle timeout={500} clickOnTrack={false}>\n              <Stack spacing={2.4}>\n                {searchResults.length > 0 && (\n                  <>\n                    <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\n                      Search Results\n                    </Typography>\n                    {searchResults.map((user, idx) => (\n                      <ChatElement\n                        key={idx}\n                        displayName={user._id === user_id ? 'Bạn' : user.displayName}\n                        onClick={() => handleSearchResultClick(user._id)}\n                      />\n                    ))}\n                    <Divider/>\n                  </>\n                )}\n                <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\n                  All Chats\n                </Typography>\n                {sortedConversationsList.map((conversation, idx) => (\n                  <ChatElement\n                    key={idx}\n                    {...conversation}\n                    displayName={conversation.members[0].displayName}\n                    msg={\n                      user_id === conversation.latestMessage?.sender\n                        ? `Bạn: ${conversation.latestMessage?.content}`\n                        : conversation.latestMessage?.content || \"No message\"\n                    }\n                    time={\n                      conversation.latestMessage\n                        ? formatTime(conversation.latestMessage?.sentTime) ||\n                          formatTime(conversation.lastActive)\n                        : \"\"\n                    }\n                    id={conversation._id}\n                    onClick={() => {\n                      dispatch(\n                        FetchCurrentMessages({ conversationId: conversation._id })\n                      );\n                      setSelectedConversation()\n                    }}\n                  />\n                ))}\n              </Stack>\n            </SimpleBarStyle>\n          </Stack>\n        </Stack>\n      </Box>\n    </>\n  );\n};\n\nexport default Chats;\n"],"names":["pathsByWeight","Map","set","color","React","cx","cy","r","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","x1","y1","x2","y2","opacity","d","renderPath","weight","renderPathForWeight","MagnifyingGlass","forwardRef","props","ref","IconBase","Object","assign","displayName","BottomNav","theme","useTheme","selectedTab","setSelectedTab","_jsx","Box","sx","zIndex","position","bottom","width","backgroundColor","palette","background","paper","boxShadow","children","_jsxs","Stack","direction","alignItems","justifyContent","spacing","p","Nav_Buttons","map","el","index","primary","main","borderRadius","IconButton","icon","onClick","mode","text","ProfileMenu","StyledChatBox","styled","_ref","cursor","StyledBadge","Badge","_ref2","concat","top","left","height","animation","border","content","transform","_ref3","img","msg","time","unread","online","id","isSearching","currentConversationId","isFirstLogin","useSelector","state","conversation","isSelected","alpha","overlap","anchorOrigin","vertical","horizontal","variant","Avatar","alt","src","Typography","string","n","length","slice","fontWeight","className","badgeContent","truncateText","marginRight","marginLeft","padding","pointerEvents","display","InputBase","paddingLeft","Chats","isDesktop","useResponsive","dispatch","useDispatch","user_id","auth","conversationsList","searchTerm","setSearchTerm","useState","searchResults","setSearchResults","selectedConversation","setSelectedConversation","openDialog","setOpenDialog","useEffect","connectSocket","FetchConversations","socket","on","SetLatestMessage","message","result","console","log","disconnectSocket","off","formatTime","date","parseISO","now","Date","adjustedDate","getTime","isSameDay","format","locale","vi","async","callAPI","url","req","response","fetch","ok","errorText","Error","json","error","sortedConversationsList","sort","a","b","_a$latestMessage","_a$latestMessage2","_b$latestMessage","_b$latestMessage2","timeA","latestMessage","isValid","sentTime","lastActive","selectedConvIndex","findIndex","conv","_id","selectedConv","splice","unshift","_Fragment","maxHeight","Search","SearchIconWrapper","StyledInputBase","placeholder","inputProps","value","onChange","event","searchStr","target","user","userID","emit","Divider","flexGrow","overflow","SimpleBarStyle","timeout","clickOnTrack","idx","ChatElement","members","toString","friendID","body","URLSearchParams","append","req1","method","headers","res","data","warn","req2","currentConversation","FetchCurrentMessages","conversationId","handleSearchResultClick","_conversation$latestM","_conversation$latestM2","_conversation$latestM3","_conversation$latestM4","sender"],"sourceRoot":""}