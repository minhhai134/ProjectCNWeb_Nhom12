{"version":3,"file":"static/js/145.a078c4dd.chunk.js","mappings":"wXAsBA,MAAMA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAcE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CAChD,oBAAqB,CACnBE,gBAAiB,UACjBC,MAAO,UACPC,UAAU,aAADC,OAAeJ,EAAMK,QAAQC,WAAWC,OACjD,WAAY,CACVC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,UAAW,mCACXC,OAAQ,yBACRC,QAAS,OAGb,oBAAqB,CACnB,KAAM,CACJC,UAAW,YACXC,QAAS,GAEX,OAAQ,CACND,UAAW,aACXC,QAAS,IAGd,IAEKC,EAAoB,CACxB,CACEC,MAAO,kBACPC,OAAQ,UA0JZ,EAtJmBC,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,GAAc,UAAW,KAAM,KAAM,MAChD1B,GAAQ2B,EAAAA,EAAAA,MAER,kBAAEC,EAAiB,sBAAEC,IAA0BC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,gBAC5E,QAACC,IAAWH,EAAAA,EAAAA,KAAaC,GAAUA,EAAMG,QAExCC,EAA0BC,GAA+BC,EAAAA,SAAe,MACzEC,EAAuBC,QAAQJ,GAI/BK,EAA8BA,KAClCJ,EAA4B,KAAK,EAkBnC,OACEK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFC,EAAG,EACHlC,MAAO,OACPmC,GAAI,CACF7C,gBACyB,UAAvBD,EAAMK,QAAQ0C,KACV,UACA/C,EAAMK,QAAQC,WACpBH,UAAW,mCACXwC,UAEFK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJC,WAAY,SACZC,UAAW,MACXL,GAAI,CAAEnC,MAAO,OAAQC,OAAQ,QAC7BwC,eAAe,gBAAeT,SAAA,EAE9BK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJI,QAASA,KACP9B,GAAS+B,EAAAA,EAAAA,MAAgB,EAE3BC,QAAS,EACTJ,UAAU,MAAKR,SAAA,EAEfF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAAAD,UACFF,EAAAA,EAAAA,KAAC7C,EAAW,CACV4D,QAAQ,WACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAAQ,MAAKjB,UAEbF,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CACLC,IAAKlC,EAAkBmC,MAAKC,GAAQA,EAAKC,MAAQpC,IAAuBqC,QAAQ,GAAGC,YACnFC,IAAK,UAIXpB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACM,QAAS,GAAIZ,SAAA,EAClBF,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CAACT,QAAQ,YAAWjB,SAC5Bf,EAAkBmC,MAAKC,GAAQA,EAAKC,MAAQpC,IAAuBqC,QAAQ,GAAGC,eAEjF1B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CAACT,QAAQ,UAASjB,SAAC,kBAGlCK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJE,UAAW,MACXD,WAAW,SACXK,QAAS9B,EAAW,EAAI,EAAEkB,SAAA,EAE1BF,EAAAA,EAAAA,KAAC6B,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,KACxC/B,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACTC,GAAG,iCACH,gBACEpC,EACI,oCACAqC,EAEN,gBAAc,OACd,gBAAerC,EAAuB,YAASqC,EAC/CtB,QArFyBuB,IACnCxC,EAA4BwC,EAAMC,cAAc,EAoFDlC,UAErCF,EAAAA,EAAAA,KAACqC,EAAAA,EAAS,OAEZrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CACHC,cAAe,CACb,kBAAmB,eAErBC,oBAAqBC,EAAAA,EACrBR,GAAG,+BACH,kBAAgB,iCAChBS,SAAUhD,EACViD,KAAM9C,EACN+C,QAAS7C,EACTiB,aAAc,CACZC,SAAU,SACVC,WAAY,SAEd2B,gBAAiB,CACf5B,SAAU,MACVC,WAAY,SACZhB,UAEFF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAG,EAAEF,UACRF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACM,QAAS,EAAEZ,SACfxB,EAAkBoE,KAAKC,IACtBxC,EAAAA,EAAAA,MAACyC,EAAAA,EAAQ,CAEPpC,QAASA,KACPb,IACkB,UAAdgD,EAAGnE,QA5GLqE,WACtB,MACMC,EAAS1D,EAET2D,EAAK,IAAIC,gBAAgB,CAAEC,OAHlBjE,EAG0B8D,WAEzC,IACE,MAAMI,QAAiBC,EAAAA,EAAMC,KAAK,eAAgBL,GAClDM,QAAQC,IAAI,qCAAsCJ,EAASK,MAC3D7E,GAAS8E,EAAAA,EAAAA,IAAkBxE,EAAuB8D,GACpD,CAAE,MAAOW,GACPJ,QAAQI,MAAM,+BAAgCA,EAChD,GAiGsBC,EACF,EACA5D,SAAA,EAEFF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJH,GAAI,CAAE0D,SAAU,KAChBrD,UAAU,MACVD,WAAY,SACZE,eAAe,gBAAeT,UAE9BF,EAAAA,EAAAA,KAAA,QAAAE,SAAO6C,EAAGpE,UACH,MAfJoE,EAAGpE,wBAwBvB,E,4FC5KP,MAAMqF,GAAc5G,EAAAA,EAAAA,IAAO6G,EAAAA,EAAP7G,EAAkBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACpD,wBAAyB,CACvB4G,WAAY,kBACZC,cAAe,mBAElB,IAEKC,EAAYC,IAMX,IANY,WACjBC,EAAU,cACVC,EAAa,SACbC,EAAQ,MACRC,EAAK,SACLC,GACDL,EACC,OACErE,EAAAA,EAAAA,KAACgE,EAAW,CACVU,SAAUA,EACVD,MAAOA,EACPE,SAAWxC,IACTqC,EAASrC,EAAMyC,OAAOH,MAAM,EAE9BI,WAAS,EACTC,YAAY,qBACZ3D,QAAQ,SACR4D,WAAY,CACVC,kBAAkB,EAClBC,gBACEjF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACH,GAAI,CAAEnC,MAAO,eAAgBgC,UAClCF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJH,GAAI,CACFtC,SAAU,WACVmH,QAAQ,oBAMhBC,cACEnF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACH,GAAI,CAAEtC,SAAU,YAAamC,UAClCF,EAAAA,EAAAA,KAACoF,EAAAA,EAAc,CAAAlF,UACbF,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACTpB,QAASA,KACP2D,GAAeD,EAAW,EAC1BpE,UAEFF,EAAAA,EAAAA,KAACqF,EAAAA,EAAM,YAMjB,EAkKN,EA9JeC,KACb,MAAM/H,GAAQ2B,EAAAA,EAAAA,KACRJ,GAAWC,EAAAA,EAAAA,OACX,kBAAEI,EAAiB,sBAACC,IAA0BC,EAAAA,EAAAA,KACjDC,GAAUA,EAAMC,eAGbgG,EAAsBpG,EAAkBmC,MAC3CC,GAASA,EAAKC,MAAQpC,IAGnBI,EAAUgG,OAAOC,aAAaC,QAAQ,WAEtC1G,GAAWC,EAAAA,EAAAA,GAAc,UAAW,KAAM,KAAM,OAEhD,QAAE0G,IAAYtG,EAAAA,EAAAA,KAAaC,GAAUA,EAAMsG,OAE1CtB,EAAYC,GAAiB3E,EAAAA,UAAe,IAE5C6E,EAAOD,IAAYqB,EAAAA,EAAAA,UAAS,IAC7BnB,GAAWoB,EAAAA,EAAAA,QAAO,MAmBxB,MAcMC,EAAyBR,EAAoBS,cAAgBxG,EAC7DyG,EAA2D,KAApCV,EAAoBS,aAAsBT,EAAoBS,cAAgBxG,EAE3G,OACEQ,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFE,GAAI,CACFtC,SAAU,WACVP,gBAAiB,0BACjB0C,UAEFF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFC,EAAGpB,EAAW,EAAI,EAClBd,MAAO,OACPmC,GAAI,CACF7C,gBACyB,UAAvBD,EAAMK,QAAQ0C,KACV,UACA/C,EAAMK,QAAQC,WACpBH,UAAW,mCACXwC,SAED6F,GACCxF,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,WAAW,SAASK,QAAS,EAAEZ,SAAA,EACpCF,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CAAA1B,SAAC,qJACZF,EAAAA,EAAAA,KAACkG,EAAAA,EAAM,CACL/E,QAAQ,YACR1D,MAAM,YACNmD,QAASA,IAzCGqC,WACtB,IACE,MAAME,EAAO,IAAIC,gBAAgB,CAC/BC,OAAQjE,EACR8D,OAAQA,IAEJI,QAAiBC,EAAAA,EAAMC,KAAK,eAAgBL,GAClDM,QAAQC,IAAI,qCAAsCJ,EAASK,MAC3D7E,GAAS8E,EAAAA,EAAAA,IAAkBxE,EAAuB8D,GACpD,CAAE,MAAOW,GACPJ,QAAQI,MAAM,+BAAgCA,EAChD,GA8ByBC,CAAgB,IAAI5D,SACpC,yBAID+F,GACFjG,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CAAA1B,SAAC,6JAEdK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACE,UAAU,MAAMD,WAAY,SAAUK,QAAS9B,EAAW,EAAI,EAAEkB,SAAA,EACrEK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACH,GAAI,CAAEnC,MAAO,QAASgC,SAAA,EAC3BF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFgG,MAAO,CACLC,OAAQ,GACRrI,SAAU,QACVmH,QAASZ,EAAa,SAAW,OACjC+B,OAAQ,GACRC,MAAOtH,EAAW,GAAK2G,EAAQhD,KAAO,IAAM,KAC5CzC,UAEFF,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACLhJ,MAAOA,EAAMK,QAAQ0C,KACrBqD,KAAMA,EACN6C,cAAgBC,KAhF9B,SAA0BA,GACxB,MAAMC,EAAQhC,EAASiC,QAEvB,GAAID,EAAO,CACT,MAAME,EAAiBF,EAAME,eACvBC,EAAeH,EAAMG,aAE3BrC,EACEC,EAAMqC,UAAU,EAAGF,GACjBH,EACAhC,EAAMqC,UAAUD,IAIpBH,EAAME,eAAiBF,EAAMG,aAAeD,EAAiB,CAC/D,CACF,CAiEgBG,CAAiBN,EAAMO,OAAO,OAKpChH,EAAAA,EAAAA,KAACoE,EAAS,CACRM,SAAUA,EACVD,MAAOA,EACPD,SAAUA,EACVF,WAAYA,EACZC,cAAeA,QAGnBvE,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFE,GAAI,CACFlC,OAAQ,GACRD,MAAO,GACPV,gBAAiBD,EAAMK,QAAQqJ,QAAQC,KACvC9I,aAAc,KACd8B,UAEFF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJH,GAAI,CAAElC,OAAQ,QACdsC,WAAY,SACZE,eAAe,SAAQT,UAEvBF,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACTpB,QAASA,KACP,MAAMuG,EAAWhI,EAAkBmC,MAAKC,GAAQA,EAAKC,MAAQpC,IAAuBqC,QAAQ,GAAGD,IACzF4F,EAAU,CACd7H,aAAcH,EACdiI,OAAQ7H,EACR2H,SAAUA,EACVG,UAAW,IAAIC,MAAQC,cACvBjJ,QAASkG,GAGXgD,EAAAA,GAAOC,KAAK,UAAWN,GACvBtI,GAAS6I,EAAAA,EAAAA,IAAiB,CAAEP,QAASA,KACrCtI,GAAS8I,EAAAA,EAAAA,IAAiB,CAAER,QAASA,KACrC5C,EAAS,IACT1F,GAAS+I,EAAAA,EAAAA,IAAYT,GAAS,EAC9BlH,UAEFF,EAAAA,EAAAA,KAAC8H,EAAAA,EAAc,CAACrK,MAAM,wBAO5B,E,mGC/NV,MAAMsK,EAAgBA,KACpB,MAAOrF,EAAUsF,GAAepI,EAAAA,SAAe,MACzC+C,EAAO7C,QAAQ4C,GAIfuF,EAAcA,KAClBD,EAAY,KAAK,EAEnB,OACEzH,EAAAA,EAAAA,MAAAN,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACkI,EAAAA,EAAiB,CAChBC,KAAM,GACNlG,GAAG,eACH,gBAAeU,EAAO,kBAAeT,EACrC,gBAAc,OACd,gBAAeS,EAAO,YAAST,EAC/BtB,QAdeuB,IACnB6F,EAAY7F,EAAMC,cAAc,KAe9BpC,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CACHL,GAAG,aACHS,SAAUA,EACVC,KAAMA,EACNC,QAASqF,EACT1F,cAAe,CACb,kBAAmB,gBACnBrC,UAEFF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACM,QAAS,EAAGsH,GAAI,EAAElI,SACtBmI,EAAAA,GAAgBvF,KAAKC,IACpB/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAQ,CAAgBpC,QAASqH,EAAY/H,SAAE6C,EAAGpE,OAApCoE,EAAGpE,eAIvB,EAID2J,EAAUhL,IAA4C,IAA3C,QAAEiB,EAAO,SAAE+I,EAAQ,SAAEiB,EAAQ,KAAEC,GAAMlL,EACpD,MAAMC,GAAQ2B,EAAAA,EAAAA,KACd,OACEqB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACE,UAAU,SAAQR,SAAA,EACzBK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACE,UAAU,MAAMC,eAAgB4H,EAAW,QAAU,MAAMrI,SAAA,EAChEF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFiI,GAAI,IACJK,GAAI,IACJpI,GAAI,CACF7C,gBAAiB+K,GACbG,EAAAA,EAAAA,IAAMnL,EAAMK,QAAQC,WAAW8K,QAAS,GACxCpL,EAAMK,QAAQqJ,QAAQC,KAC1B9I,aAAc,IACdF,MAAO,eACPgC,UAEFF,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CACTT,QAAQ,QACR1D,MAAO8K,EAAWhL,EAAMK,QAAQgL,KAAO,OAAO1I,SAE7C3B,MAGJiK,IAAQxI,EAAAA,EAAAA,KAAC+H,EAAa,QAEzB/H,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACAiI,GAAI,GACJK,GAAI,GACJpI,GAAI,CACFnC,MAAM,QACNgC,UAEFF,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CACTT,QAAQ,UACRd,GAAI,CAAE5C,MAAQF,EAAMK,QAAQgL,KAAM1D,QAAS,QAAS2D,UAAWN,EAAS,OAAO,SAAWrI,SAEzFoH,QAGC,EClFN9H,EAAUgG,OAAOC,aAAaC,QAAQ,WAEtCoD,EAAexL,IAAyB,IAAxB,SAAE0B,EAAQ,KAAEwJ,GAAMlL,EACtC,MAAM,iBAAEyL,IAAqB1J,EAAAA,EAAAA,KAC1BC,GAAUA,EAAMC,eAGbyJ,EAAcC,IAClB,MAAMC,GAAOC,EAAAA,EAAAA,GAASF,GAChBG,EAAM,IAAI7B,KAGV8B,EAAe,IAAI9B,KAAK2B,EAAKI,WAEnC,OAAIC,EAAAA,EAAAA,GAAUF,EAAcD,IACnBI,EAAAA,EAAAA,IAAOH,EAAc,QAAS,CAAEI,OAAQC,EAAAA,MAExCF,EAAAA,EAAAA,IAAOH,EAAc,aAAc,CAAEI,OAAQC,EAAAA,IACtD,EAGF,OACE1J,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAGpB,EAAW,EAAI,EAAEkB,UACvBF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACM,QAAS,EAAEZ,SACf6I,EAAiBjG,KAAI,CAACC,EAAI4G,KAEvB3J,EAAAA,EAAAA,KAACsI,EAAO,CAEN/J,QAASwE,EAAGxE,QACZgK,SAAUxF,EAAGsE,SAAW7H,EACxB8H,SAAU0B,EAAWjG,EAAGuE,UACxBkB,KAAMA,GAJDmB,QAST,EA0DV,EAtDsBC,KACpB,MAAM5K,GAAWC,EAAAA,EAAAA,GAAc,UAAW,KAAM,KAAM,MAChD1B,GAAQ2B,EAAAA,EAAAA,KACR2K,GAAiB/D,EAAAA,EAAAA,QAAO,OACxB,iBAAEiD,IAAqB1J,EAAAA,EAAAA,KAC1BC,GAAUA,EAAMC,eAGbT,GAAWC,EAAAA,EAAAA,MAgBjB,OAdA+K,EAAAA,EAAAA,YAAU,KACNrC,EAAAA,GAAOsC,GAAG,aAAcC,IACtBlL,GAAS6I,EAAAA,EAAAA,IAAiB,CAAEP,QAAS4C,KACrClL,GAAS8I,EAAAA,EAAAA,IAAiB,CAAER,QAAS4C,IAAO,IAEvC,KACLvC,EAAAA,GAAOwC,IAAI,YAAY,IAE1B,CAACnL,KAEJgL,EAAAA,EAAAA,YAAU,KACRD,EAAelD,QAAQuD,UAAYL,EAAelD,QAAQwD,YAAY,GACrE,CAACpB,KAGFxI,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJrC,OAAQ,OACRiM,UAAW,QACXlM,MAAOc,EAAW,QAAU,OAAOkB,SAAA,EAEnCF,EAAAA,EAAAA,KAACnB,EAAU,KACXmB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CACFkK,IAAKR,EACL3L,MAAO,OACPmC,GAAI,CACFtC,SAAU,WACVuM,SAAU,EACVC,SAAU,SACV/M,gBACyB,UAAvBD,EAAMK,QAAQ0C,KACV,UACA/C,EAAMK,QAAQC,WACpBH,UAAW,mCACXwC,UAEFF,EAAAA,EAAAA,KAACwK,EAAAA,EAAc,CAACC,QAAS,IAAKC,cAAc,EAAMxK,UAChDF,EAAAA,EAAAA,KAAC8I,EAAY,CAACN,MAAM,EAAMxJ,SAAUA,SAGxCgB,EAAAA,EAAAA,KAAC2K,EAAU,MACL,C","sources":["components/Chat/Header.js","components/Chat/Footer.js","sections/Dashboard/Conversation.js","pages/dashboard/Conversation.js"],"sourcesContent":["import React from \"react\";\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  Fade,\n  IconButton,\n  Menu,\n  MenuItem,\n  Stack,\n  styled,\n  Typography,\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { CaretDown } from \"phosphor-react\";\nimport useResponsive from \"../../hooks/useResponsive\";\nimport { ToggleSidebar } from \"../../redux/slices/app\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"../../utils/axios\";\nimport { UpdateBlockStatus } from \"../../redux/slices/conversation\";\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    backgroundColor: \"#44b700\",\n    color: \"#44b700\",\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    \"&::after\": {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: \"50%\",\n      animation: \"ripple 1.2s infinite ease-in-out\",\n      border: \"1px solid currentColor\",\n      content: '\"\"',\n    },\n  },\n  \"@keyframes ripple\": {\n    \"0%\": {\n      transform: \"scale(.8)\",\n      opacity: 1,\n    },\n    \"100%\": {\n      transform: \"scale(2.4)\",\n      opacity: 0,\n    },\n  },\n}));\n\nconst Conversation_Menu = [\n  {\n    title: \"Block this user\",\n    action: \"block\",\n  },\n];\n\nconst ChatHeader = () => {\n  const dispatch = useDispatch();\n  const isMobile = useResponsive(\"between\", \"md\", \"xs\", \"sm\");\n  const theme = useTheme();\n\n  const { conversationsList, currentConversationId } = useSelector((state) => state.conversation);\n  const {user_id} = useSelector((state) => state.auth);\n\n  const [conversationMenuAnchorEl, setConversationMenuAnchorEl] = React.useState(null);\n  const openConversationMenu = Boolean(conversationMenuAnchorEl);\n  const handleClickConversationMenu = (event) => {\n    setConversationMenuAnchorEl(event.currentTarget);\n  };\n  const handleCloseConversationMenu = () => {\n    setConversationMenuAnchorEl(null);\n  };\n\n  const handleBlockUser = async () => {\n    const convID = currentConversationId;\n    const status = user_id;\n    \n    const body=new URLSearchParams({ convID, status })\n    \n    try {\n      const response = await axios.post(\"/blockStatus\", body);\n      console.log(\"Block status updated successfully:\", response.data);\n      dispatch(UpdateBlockStatus(currentConversationId, status));\n    } catch (error) {\n      console.error(\"Error updating block status:\", error);\n    }\n  };\n\n  return (\n    <>\n      <Box\n        p={2}\n        width={\"100%\"}\n        sx={{\n          backgroundColor:\n            theme.palette.mode === \"light\"\n              ? \"#F8FAFF\"\n              : theme.palette.background,\n          boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n        }}\n      >\n        <Stack\n          alignItems={\"center\"}\n          direction={\"row\"}\n          sx={{ width: \"100%\", height: \"100%\" }}\n          justifyContent=\"space-between\"\n        >\n          <Stack\n            onClick={() => {\n              dispatch(ToggleSidebar());\n            }}\n            spacing={2}\n            direction=\"row\"\n          >\n            <Box>\n              <StyledBadge\n                overlap=\"circular\"\n                anchorOrigin={{\n                  vertical: \"bottom\",\n                  horizontal: \"right\",\n                }}\n                variant=\"dot\"\n              >\n                <Avatar\n                  alt={conversationsList.find(conv => conv._id === currentConversationId).members[0].displayName}\n                  src={''}\n                />\n              </StyledBadge>\n            </Box>\n            <Stack spacing={0.2}>\n              <Typography variant=\"subtitle2\">\n                {conversationsList.find(conv => conv._id === currentConversationId).members[0].displayName}\n              </Typography>\n              <Typography variant=\"caption\">Online</Typography>\n            </Stack>\n          </Stack>\n          <Stack\n            direction={\"row\"}\n            alignItems=\"center\"\n            spacing={isMobile ? 1 : 3}\n          >\n            <Divider orientation=\"vertical\" flexItem />\n            <IconButton\n              id=\"conversation-positioned-button\"\n              aria-controls={\n                openConversationMenu\n                  ? \"conversation-positioned-menu\"\n                  : undefined\n              }\n              aria-haspopup=\"true\"\n              aria-expanded={openConversationMenu ? \"true\" : undefined}\n              onClick={handleClickConversationMenu}\n            >\n              <CaretDown />\n            </IconButton>\n            <Menu\n              MenuListProps={{\n                \"aria-labelledby\": \"fade-button\",\n              }}\n              TransitionComponent={Fade}\n              id=\"conversation-positioned-menu\"\n              aria-labelledby=\"conversation-positioned-button\"\n              anchorEl={conversationMenuAnchorEl}\n              open={openConversationMenu}\n              onClose={handleCloseConversationMenu}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"right\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n            >\n              <Box p={1}>\n                <Stack spacing={1}>\n                  {Conversation_Menu.map((el) => (\n                    <MenuItem\n                      key={el.title}\n                      onClick={() => {\n                        handleCloseConversationMenu();\n                        if (el.action === \"block\") {\n                          handleBlockUser();\n                        }\n                      }}\n                    >\n                      <Stack\n                        sx={{ minWidth: 100 }}\n                        direction=\"row\"\n                        alignItems={\"center\"}\n                        justifyContent=\"space-between\"\n                      >\n                        <span>{el.title}</span>\n                      </Stack>{\" \"}\n                    </MenuItem>\n                  ))}\n                </Stack>\n              </Box>\n            </Menu>\n          </Stack>\n        </Stack>\n      </Box>\n    </>\n  );\n};\n\nexport default ChatHeader;\n","import {\n  Box,\n  Fab,\n  IconButton,\n  InputAdornment,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,Button\n} from \"@mui/material\";\nimport {\n  Camera,\n  File,\n  Image,\n  LinkSimple,\n  PaperPlaneTilt,\n  Smiley,\n  Sticker,\n  User,\n} from \"phosphor-react\";\nimport { useTheme, styled } from \"@mui/material/styles\";\nimport React, { useRef, useState } from \"react\";\nimport useResponsive from \"../../hooks/useResponsive\";\nimport data from \"@emoji-mart/data\";\nimport Picker from \"@emoji-mart/react\";\nimport { socket } from \"../../socket\";\nimport {useDispatch, useSelector } from \"react-redux\";\nimport { SendMessage,AddDirectMessage,SetLatestMessage } from \"../../redux/slices/conversation\";\nimport { set } from \"date-fns\";\nimport axios from \"../../utils/axios\";\nimport { UpdateBlockStatus } from \"../../redux/slices/conversation\";\n\nconst StyledInput = styled(TextField)(({ theme }) => ({\n  \"& .MuiInputBase-input\": {\n    paddingTop: \"12px !important\",\n    paddingBottom: \"12px !important\",\n  },\n}));\n\nconst ChatInput = ({\n  openPicker,\n  setOpenPicker,\n  setValue,\n  value,\n  inputRef,\n}) => {\n  return (\n    <StyledInput\n      inputRef={inputRef}\n      value={value}\n      onChange={(event) => {\n        setValue(event.target.value);\n      }}\n      fullWidth\n      placeholder=\"Write a message...\"\n      variant=\"filled\"\n      InputProps={{\n        disableUnderline: true,\n        startAdornment: (\n          <Stack sx={{ width: \"max-content\" }}>\n            <Stack\n              sx={{\n                position: \"relative\",\n                display:\"inline-block\" \n              }}\n            >\n            </Stack>\n          </Stack>\n        ),\n        endAdornment: (\n          <Stack sx={{ position: \"relative\" }}>\n            <InputAdornment>\n              <IconButton\n                onClick={() => {\n                  setOpenPicker(!openPicker);\n                }}\n              >\n                <Smiley />\n              </IconButton>\n            </InputAdornment>\n          </Stack>\n        ),\n      }}\n    />\n  );\n};\n\nconst Footer = () => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { conversationsList,currentConversationId } = useSelector(\n    (state) => state.conversation\n  );\n\n  const currentConversation = conversationsList.find(\n    (conv) => conv._id === currentConversationId\n  );\n  \n  const user_id = window.localStorage.getItem(\"user_id\");\n\n  const isMobile = useResponsive(\"between\", \"md\", \"xs\", \"sm\");\n\n  const { sideBar } = useSelector((state) => state.app);\n\n  const [openPicker, setOpenPicker] = React.useState(false);\n\n  const [value, setValue] = useState(\"\");\n  const inputRef = useRef(null);\n\n  function handleEmojiClick(emoji) {\n    const input = inputRef.current;\n\n    if (input) {\n      const selectionStart = input.selectionStart;\n      const selectionEnd = input.selectionEnd;\n\n      setValue(\n        value.substring(0, selectionStart) +\n          emoji +\n          value.substring(selectionEnd)\n      );\n\n      // Move the cursor to the end of the inserted emoji\n      input.selectionStart = input.selectionEnd = selectionStart + 1;\n    }\n  }\n  const handleBlockUser = async (status) => {\n    try {\n      const body = new URLSearchParams({\n        convID: currentConversationId,\n        status: status,\n      });\n      const response = await axios.post(\"/blockStatus\", body);\n      console.log(\"Block status updated successfully:\", response.data);\n      dispatch(UpdateBlockStatus(currentConversationId, status));\n    } catch (error) {\n      console.error(\"Error updating block status:\", error);\n    }\n  };\n\n  const isBlockedByCurrentUser = currentConversation.blockStatus === user_id;\n  const isBlockedByOtherUser = currentConversation.blockStatus !== '' && currentConversation.blockStatus !== user_id;\n\n  return (\n    <Box\n      sx={{\n        position: \"relative\",\n        backgroundColor: \"transparent !important\",\n      }}\n    >\n      <Box\n        p={isMobile ? 1 : 2}\n        width={\"100%\"}\n        sx={{\n          backgroundColor:\n            theme.palette.mode === \"light\"\n              ? \"#F8FAFF\"\n              : theme.palette.background,\n          boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n        }}\n      >\n        {isBlockedByCurrentUser ? (\n          <Stack alignItems=\"center\" spacing={2}>\n            <Typography>Bạn đã chặn người dùng này và không thể gửi hay nhận tin nhắn đến họ</Typography>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => handleBlockUser('')}\n            >\n              Bỏ chặn\n            </Button>\n          </Stack>\n        ) : isBlockedByOtherUser ? (\n          <Typography>Bạn đã bị người dùng này chặn và không thể gửi hay nhận tin nhắn đến họ</Typography>\n        ) : (\n        <Stack direction=\"row\" alignItems={\"center\"} spacing={isMobile ? 1 : 3}>\n          <Stack sx={{ width: \"100%\" }}>\n            <Box\n              style={{\n                zIndex: 10,\n                position: \"fixed\",\n                display: openPicker ? \"inline\" : \"none\",\n                bottom: 81,\n                right: isMobile ? 20 : sideBar.open ? 420 : 100,\n              }}\n            >\n              <Picker\n                theme={theme.palette.mode}\n                data={data}\n                onEmojiSelect={(emoji) => {\n                  handleEmojiClick(emoji.native);\n                }}\n              />\n            </Box>\n            {/* Chat Input */}\n            <ChatInput\n              inputRef={inputRef}\n              value={value}\n              setValue={setValue}\n              openPicker={openPicker}\n              setOpenPicker={setOpenPicker}\n            />\n          </Stack>\n          <Box\n            sx={{\n              height: 48,\n              width: 48,\n              backgroundColor: theme.palette.primary.main,\n              borderRadius: 1.5,\n            }}\n          >\n            <Stack\n              sx={{ height: \"100%\" }}\n              alignItems={\"center\"}\n              justifyContent=\"center\"\n            >\n              <IconButton\n                onClick={() => {\n                  const receiver = conversationsList.find(conv => conv._id === currentConversationId).members[0]._id;\n                  const message = {\n                    conversation: currentConversationId,\n                    sender: user_id,\n                    receiver: receiver,\n                    sentTime: (new Date()).toISOString(),\n                    content: value,\n                  };\n\n                  socket.emit(\"sendMsg\", message);\n                  dispatch(AddDirectMessage({ message: message }));\n                  dispatch(SetLatestMessage({ message: message }))\n                  setValue(\"\")\n                  dispatch(SendMessage(message));\n                }}\n              >\n                <PaperPlaneTilt color=\"#ffffff\" />\n              </IconButton>\n            </Stack>\n          </Box>\n        </Stack>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport {\n  Stack,\n  Box,\n  Typography,\n  Menu,\n  MenuItem,\n  IconButton,\n  Divider,\n} from \"@mui/material\";\nimport { useTheme, alpha } from \"@mui/material/styles\";\nimport { DotsThreeVertical, DownloadSimple, Image } from \"phosphor-react\";\nimport { Message_options } from \"../../data\";\nimport truncateString from \"../../utils/truncate\";\nimport { LinkPreview } from \"@dhaiwat10/react-link-preview\";\nimport ReactPlayer from 'react-player';\nimport Embed from 'react-embed';\n\nconst MessageOption = () => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  return (\n    <>\n      <DotsThreeVertical\n        size={20}\n        id=\"basic-button\"\n        aria-controls={open ? \"basic-menu\" : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? \"true\" : undefined}\n        onClick={handleClick}\n      />\n      <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n      >\n        <Stack spacing={1} px={1}>\n          {Message_options.map((el) => (\n            <MenuItem key={el.title} onClick={handleClose}>{el.title}</MenuItem>\n          ))}\n        </Stack>\n      </Menu>\n    </>\n  );\n};\n\nconst TextMsg = ({ content, sentTime, incoming, menu }) => {\n  const theme = useTheme();\n  return (\n    <Stack direction='column'>\n    <Stack direction=\"row\" justifyContent={incoming ? \"start\" : \"end\"}>\n      <Box\n        px={1.5}\n        py={1.5}\n        sx={{\n          backgroundColor: incoming\n            ? alpha(theme.palette.background.default, 1)\n            : theme.palette.primary.main,\n          borderRadius: 1.5,\n          width: \"max-content\",\n        }}\n      >\n        <Typography\n          variant=\"body2\"\n          color={incoming ? theme.palette.text : \"#fff\"}\n        >\n          {content}\n        </Typography>\n      </Box>\n      {menu && <MessageOption />}\n    </Stack>\n    <Box\n        px={10}\n        py={0.5}\n        sx={{\n          width:'100%',\n        }}\n      >\n        <Typography\n          variant=\"caption\"\n          sx={{ color:  theme.palette.text, display: 'block', textAlign: incoming?'left':'right'  }}\n        >\n          {sentTime}\n        </Typography>\n      </Box>\n    </Stack>\n  );\n};\n\n\nexport { TextMsg };\n","import { Stack, Box } from \"@mui/material\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { SimpleBarStyle } from \"../../components/Scrollbar\";\nimport { ChatHeader, ChatFooter } from \"../../components/Chat\";\nimport useResponsive from \"../../hooks/useResponsive\";\nimport { format, parseISO, isSameDay } from \"date-fns\";\nimport { vi } from 'date-fns/locale';\nimport { TextMsg } from \"../../sections/Dashboard/Conversation\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { socket } from \"../../socket\";\nimport { AddDirectMessage,SetLatestMessage } from \"../../redux/slices/conversation\";\n\nconst user_id = window.localStorage.getItem(\"user_id\");\n\nconst Conversation = ({ isMobile, menu }) => {\n  const { current_messages } = useSelector(\n    (state) => state.conversation\n  );\n\n  const formatTime = (time) => {\n    const date = parseISO(time);\n    const now = new Date();\n  \n    // Adjust for GMT+7\n    const adjustedDate = new Date(date.getTime());\n  \n    if (isSameDay(adjustedDate, now)) {\n      return format(adjustedDate, \"HH:mm\", { locale: vi });\n    } else {\n      return format(adjustedDate, \"dd/MM/yyyy\", { locale: vi });\n    }\n  };\n\n  return (\n    <Box p={isMobile ? 1 : 3}>\n      <Stack spacing={3}>\n        {current_messages.map((el, idx) => {\n          return (\n            <TextMsg\n              key={idx}\n              content={el.content}\n              incoming={el.sender !== user_id}\n              sentTime={formatTime(el.sentTime)}\n              menu={menu}\n            />\n          );\n        })}\n      </Stack>\n    </Box>\n  );\n};\n\nconst ChatComponent = () => {\n  const isMobile = useResponsive(\"between\", \"md\", \"xs\", \"sm\");\n  const theme = useTheme();\n  const messageListRef = useRef(null);\n  const { current_messages } = useSelector(\n    (state) => state.conversation\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n      socket.on(\"trans-msg\", (msg) => {\n        dispatch(AddDirectMessage({ message: msg }));\n        dispatch(SetLatestMessage({ message: msg }));\n      });\n      return () => {\n        socket.off(\"trans-msg\");\n      };\n  }, [dispatch]);\n\n  useEffect(() => {\n    messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n  }, [current_messages]);\n\n  return (\n    <Stack\n      height={\"100%\"}\n      maxHeight={\"100vh\"}\n      width={isMobile ? \"100vw\" : \"auto\"}\n    >\n      <ChatHeader />\n      <Box\n        ref={messageListRef}\n        width={\"100%\"}\n        sx={{\n          position: \"relative\",\n          flexGrow: 1,\n          overflow: \"scroll\",\n          backgroundColor:\n            theme.palette.mode === \"light\"\n              ? \"#F0F4FA\"\n              : theme.palette.background,\n          boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n        }}\n      >\n        <SimpleBarStyle timeout={500} clickOnTrack={false}>\n          <Conversation menu={true} isMobile={isMobile} />\n        </SimpleBarStyle>\n      </Box>\n      <ChatFooter />\n    </Stack>\n  );\n};\n\nexport default ChatComponent;\nexport { Conversation };\n"],"names":["StyledBadge","styled","Badge","_ref","theme","backgroundColor","color","boxShadow","concat","palette","background","paper","position","top","left","width","height","borderRadius","animation","border","content","transform","opacity","Conversation_Menu","title","action","ChatHeader","dispatch","useDispatch","isMobile","useResponsive","useTheme","conversationsList","currentConversationId","useSelector","state","conversation","user_id","auth","conversationMenuAnchorEl","setConversationMenuAnchorEl","React","openConversationMenu","Boolean","handleCloseConversationMenu","_jsx","_Fragment","children","Box","p","sx","mode","_jsxs","Stack","alignItems","direction","justifyContent","onClick","ToggleSidebar","spacing","overlap","anchorOrigin","vertical","horizontal","variant","Avatar","alt","find","conv","_id","members","displayName","src","Typography","Divider","orientation","flexItem","IconButton","id","undefined","event","currentTarget","CaretDown","Menu","MenuListProps","TransitionComponent","Fade","anchorEl","open","onClose","transformOrigin","map","el","MenuItem","async","status","body","URLSearchParams","convID","response","axios","post","console","log","data","UpdateBlockStatus","error","handleBlockUser","minWidth","StyledInput","TextField","paddingTop","paddingBottom","ChatInput","_ref2","openPicker","setOpenPicker","setValue","value","inputRef","onChange","target","fullWidth","placeholder","InputProps","disableUnderline","startAdornment","display","endAdornment","InputAdornment","Smiley","Footer","currentConversation","window","localStorage","getItem","sideBar","app","useState","useRef","isBlockedByCurrentUser","blockStatus","isBlockedByOtherUser","Button","style","zIndex","bottom","right","Picker","onEmojiSelect","emoji","input","current","selectionStart","selectionEnd","substring","handleEmojiClick","native","primary","main","receiver","message","sender","sentTime","Date","toISOString","socket","emit","AddDirectMessage","SetLatestMessage","SendMessage","PaperPlaneTilt","MessageOption","setAnchorEl","handleClose","DotsThreeVertical","size","px","Message_options","TextMsg","incoming","menu","py","alpha","default","text","textAlign","Conversation","current_messages","formatTime","time","date","parseISO","now","adjustedDate","getTime","isSameDay","format","locale","vi","idx","ChatComponent","messageListRef","useEffect","on","msg","off","scrollTop","scrollHeight","maxHeight","ref","flexGrow","overflow","SimpleBarStyle","timeout","clickOnTrack","ChatFooter"],"sourceRoot":""}